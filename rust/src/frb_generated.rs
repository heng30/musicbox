// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::bilibili::bilibili::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.1.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1172591305;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__bilibili__bv_download_audio_by_id_with_callback_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bv_download_audio_by_id_with_callback",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                crate::api::data::ProgressData,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            let api_id = <String>::sse_decode(&mut deserializer);
            let api_cid = <i64>::sse_decode(&mut deserializer);
            let api_download_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::bilibili::bv_download_audio_by_id_with_callback(
                                api_sink,
                                api_id,
                                api_cid,
                                api_download_path,
                            )
                            .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__bilibili__bv_download_pic_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bv_download_pic",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_url = <String>::sse_decode(&mut deserializer);
            let api_download_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::bilibili::bv_download_pic(api_url, api_download_path)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__bilibili__bv_fetch_ids_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bv_fetch_ids",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_keyword = <String>::sse_decode(&mut deserializer);
            let api_max_id_count = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::bilibili::bv_fetch_ids(api_keyword, api_max_id_count)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__bilibili__bv_video_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bv_video_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_bvid = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::bilibili::bv_video_info(api_bvid).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__bilibili__bv_watch_url_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bv_watch_url",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::bilibili::bv_watch_url(api_id))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__bilibili__bilibili__Client_audio_urls_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Client_audio_urls",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>,
            >>::sse_decode(&mut deserializer);
            let api_bvid = <String>::sse_decode(&mut deserializer);
            let api_cid = <i64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::bilibili::bilibili::Client::audio_urls(
                            &*api_that_guard,
                            api_bvid,
                            api_cid,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__bilibili__bilibili__Client_download_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Client_download",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>,
            >>::sse_decode(&mut deserializer);
            let api_url = <String>::sse_decode(&mut deserializer);
            let api_file_path = <String>::sse_decode(&mut deserializer);
            let api_channel = <Option<Sender<ProgressData>>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::bilibili::bilibili::Client::download(
                            &*api_that_guard,
                            api_url,
                            api_file_path,
                            api_channel,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__bilibili__bilibili__Client_fetch_ids_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Client_fetch_ids",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>,
            >>::sse_decode(&mut deserializer);
            let api_keyword = <String>::sse_decode(&mut deserializer);
            let api_max_id_count = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::bilibili::bilibili::Client::fetch_ids(
                            &*api_that_guard,
                            api_keyword,
                            api_max_id_count,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__bilibili__bilibili__Client_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Client_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>,
            >>::sse_decode(&mut deserializer);
            let api_bvid = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::bilibili::bilibili::Client::info(
                            &*api_that_guard,
                            api_bvid,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__bilibili__bilibili__Client_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Client_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::bilibili::bilibili::Client::new()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__bilibili__bilibili__Client_request_pic_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Client_request_pic",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>,
            >>::sse_decode(&mut deserializer);
            let api_url = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::bilibili::bilibili::Client::request_pic(
                            &*api_that_guard,
                            api_url,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__bilibili__bilibili__Client_video_url_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Client_video_url",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>,
            >>::sse_decode(&mut deserializer);
            let api_bvid = <String>::sse_decode(&mut deserializer);
            let api_cid = <i64>::sse_decode(&mut deserializer);
            let api_fnval = <i64>::sse_decode(&mut deserializer);
            let api_video_quality =
                <crate::api::data::bilibili::VideoQuality>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::bilibili::bilibili::Client::video_url(
                            &*api_that_guard,
                            api_bvid,
                            api_cid,
                            api_fnval,
                            api_video_quality,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__data__info_data_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "info_data_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::data::InfoData::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__progress_data_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "progress_data_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::data::ProgressData::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__audio_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "audio_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::Audio::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__bv_info_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bv_info_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::BvInfo::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__dash_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dash_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::Dash::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__desc_v_2_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "desc_v_2_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::DescV2::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__dimension_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dimension_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::Dimension::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__durl_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "durl_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::Durl::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__owner_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "owner_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::Owner::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__page_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "page_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::Page::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__rights_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rights_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::Rights::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__segment_base_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "segment_base_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::SegmentBase::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__stat_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "stat_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::Stat::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__support_format_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "support_format_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::SupportFormat::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__video_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "video_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::Video::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__video_quality_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "video_quality_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::VideoQuality::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__data__bilibili__video_url_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "video_url_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::data::bilibili::VideoUrl::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__log__init_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::log::init();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__log__init_logger_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_logger",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::log::init_logger();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__lyric__get_lyric_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_lyric",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_token = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::lyric::get_lyric(api_token).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__lyric__save_lyric_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "save_lyric",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_text = <String>::sse_decode(&mut deserializer);
            let api_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::lyric::save_lyric(api_text, api_path).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__lyric__search_lyric_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "search_lyric",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_keyword = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::lyric::search_lyric(api_keyword).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__lyric__search_lyric_item_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "search_lyric_item_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::lyric::SearchLyricItem::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__msg_center__msg_center_init_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "msg_center_init",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                crate::api::data::MsgItem,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::msg_center::msg_center_init(api_sink).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__msg_center__send_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_item = <crate::api::data::MsgItem>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::msg_center::send(api_item).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__util__create_dir_all_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_dir_all",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_dir = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::util::create_dir_all(api_dir).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender<ProgressData>>
);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for Client {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for Sender<ProgressData> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender<ProgressData>>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender<ProgressData>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for StreamSink<crate::api::data::MsgItem, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<crate::api::data::ProgressData, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::data::bilibili::Audio {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <i64>::sse_decode(deserializer);
        let mut var_baseUrl = <String>::sse_decode(deserializer);
        let mut var_backupUrl = <Vec<String>>::sse_decode(deserializer);
        let mut var_backupUrl2 = <Vec<String>>::sse_decode(deserializer);
        let mut var_bandwidth = <i64>::sse_decode(deserializer);
        let mut var_mimeType = <String>::sse_decode(deserializer);
        let mut var_mimeType2 = <String>::sse_decode(deserializer);
        let mut var_codecs = <String>::sse_decode(deserializer);
        let mut var_width = <i64>::sse_decode(deserializer);
        let mut var_height = <i64>::sse_decode(deserializer);
        let mut var_frameRate = <String>::sse_decode(deserializer);
        let mut var_frameRate2 = <String>::sse_decode(deserializer);
        let mut var_sar = <String>::sse_decode(deserializer);
        let mut var_startWithSap = <i64>::sse_decode(deserializer);
        let mut var_startWithSap2 = <i64>::sse_decode(deserializer);
        let mut var_segmentBase =
            <crate::api::data::bilibili::SegmentBase>::sse_decode(deserializer);
        let mut var_codecid = <i64>::sse_decode(deserializer);
        return crate::api::data::bilibili::Audio {
            id: var_id,
            base_url: var_baseUrl,
            backup_url: var_backupUrl,
            backup_url2: var_backupUrl2,
            bandwidth: var_bandwidth,
            mime_type: var_mimeType,
            mime_type2: var_mimeType2,
            codecs: var_codecs,
            width: var_width,
            height: var_height,
            frame_rate: var_frameRate,
            frame_rate2: var_frameRate2,
            sar: var_sar,
            start_with_sap: var_startWithSap,
            start_with_sap2: var_startWithSap2,
            segment_base: var_segmentBase,
            codecid: var_codecid,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::data::bilibili::BvInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_bvid = <String>::sse_decode(deserializer);
        let mut var_aid = <i64>::sse_decode(deserializer);
        let mut var_videos = <i64>::sse_decode(deserializer);
        let mut var_tid = <i64>::sse_decode(deserializer);
        let mut var_copyright = <i64>::sse_decode(deserializer);
        let mut var_pic = <String>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_ctime = <i64>::sse_decode(deserializer);
        let mut var_desc = <String>::sse_decode(deserializer);
        let mut var_descV2 = <Vec<crate::api::data::bilibili::DescV2>>::sse_decode(deserializer);
        let mut var_rights = <crate::api::data::bilibili::Rights>::sse_decode(deserializer);
        let mut var_owner = <crate::api::data::bilibili::Owner>::sse_decode(deserializer);
        let mut var_stat = <crate::api::data::bilibili::Stat>::sse_decode(deserializer);
        let mut var_state = <i64>::sse_decode(deserializer);
        let mut var_duration = <i64>::sse_decode(deserializer);
        let mut var_dynamic_ = <String>::sse_decode(deserializer);
        let mut var_cid = <i64>::sse_decode(deserializer);
        let mut var_dimension = <crate::api::data::bilibili::Dimension>::sse_decode(deserializer);
        let mut var_noCache = <bool>::sse_decode(deserializer);
        let mut var_pages = <Vec<crate::api::data::bilibili::Page>>::sse_decode(deserializer);
        return crate::api::data::bilibili::BvInfo {
            bvid: var_bvid,
            aid: var_aid,
            videos: var_videos,
            tid: var_tid,
            copyright: var_copyright,
            pic: var_pic,
            title: var_title,
            ctime: var_ctime,
            desc: var_desc,
            desc_v2: var_descV2,
            rights: var_rights,
            owner: var_owner,
            stat: var_stat,
            state: var_state,
            duration: var_duration,
            dynamic: var_dynamic_,
            cid: var_cid,
            dimension: var_dimension,
            no_cache: var_noCache,
            pages: var_pages,
        };
    }
}

impl SseDecode for crate::api::data::bilibili::Dash {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_duration = <i64>::sse_decode(deserializer);
        let mut var_minBufferTime = <f64>::sse_decode(deserializer);
        let mut var_minBufferTime2 = <f64>::sse_decode(deserializer);
        let mut var_video = <Vec<crate::api::data::bilibili::Video>>::sse_decode(deserializer);
        let mut var_audio = <Vec<crate::api::data::bilibili::Audio>>::sse_decode(deserializer);
        return crate::api::data::bilibili::Dash {
            duration: var_duration,
            min_buffer_time: var_minBufferTime,
            min_buffer_time2: var_minBufferTime2,
            video: var_video,
            audio: var_audio,
        };
    }
}

impl SseDecode for crate::api::data::bilibili::DescV2 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_rawText = <String>::sse_decode(deserializer);
        let mut var_descType = <i64>::sse_decode(deserializer);
        let mut var_bizId = <i64>::sse_decode(deserializer);
        let mut var_rights = <crate::api::data::bilibili::Rights>::sse_decode(deserializer);
        let mut var_owner = <crate::api::data::bilibili::Owner>::sse_decode(deserializer);
        let mut var_stat = <crate::api::data::bilibili::Stat>::sse_decode(deserializer);
        return crate::api::data::bilibili::DescV2 {
            raw_text: var_rawText,
            desc_type: var_descType,
            biz_id: var_bizId,
            rights: var_rights,
            owner: var_owner,
            stat: var_stat,
        };
    }
}

impl SseDecode for crate::api::data::bilibili::Dimension {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_width = <i64>::sse_decode(deserializer);
        let mut var_height = <i64>::sse_decode(deserializer);
        let mut var_rotate = <i64>::sse_decode(deserializer);
        return crate::api::data::bilibili::Dimension {
            width: var_width,
            height: var_height,
            rotate: var_rotate,
        };
    }
}

impl SseDecode for crate::api::data::bilibili::Durl {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_order = <i64>::sse_decode(deserializer);
        let mut var_length = <i64>::sse_decode(deserializer);
        let mut var_size = <i64>::sse_decode(deserializer);
        let mut var_ahead = <String>::sse_decode(deserializer);
        let mut var_vhead = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_backupUrl = <Vec<String>>::sse_decode(deserializer);
        return crate::api::data::bilibili::Durl {
            order: var_order,
            length: var_length,
            size: var_size,
            ahead: var_ahead,
            vhead: var_vhead,
            url: var_url,
            backup_url: var_backupUrl,
        };
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::data::InfoData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_author = <String>::sse_decode(deserializer);
        let mut var_videoId = <String>::sse_decode(deserializer);
        let mut var_shortDescription = <String>::sse_decode(deserializer);
        let mut var_viewCount = <u64>::sse_decode(deserializer);
        let mut var_lengthSeconds = <u64>::sse_decode(deserializer);
        let mut var_bvCid = <i64>::sse_decode(deserializer);
        let mut var_picUrl = <String>::sse_decode(deserializer);
        return crate::api::data::InfoData {
            title: var_title,
            author: var_author,
            video_id: var_videoId,
            short_description: var_shortDescription,
            view_count: var_viewCount,
            length_seconds: var_lengthSeconds,
            bv_cid: var_bvCid,
            pic_url: var_picUrl,
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::data::bilibili::Audio> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::data::bilibili::Audio>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::data::bilibili::DescV2> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::data::bilibili::DescV2>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::data::bilibili::Durl> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::data::bilibili::Durl>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::data::bilibili::Page> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::data::bilibili::Page>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<i64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::lyric::SearchLyricItem> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::lyric::SearchLyricItem>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::data::bilibili::SupportFormat> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::data::bilibili::SupportFormat>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::data::bilibili::Video> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::data::bilibili::Video>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::data::MsgItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ty = <crate::api::data::MsgType>::sse_decode(deserializer);
        let mut var_data = <String>::sse_decode(deserializer);
        return crate::api::data::MsgItem {
            ty: var_ty,
            data: var_data,
        };
    }
}

impl SseDecode for crate::api::data::MsgType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::data::MsgType::PlainText,
            1 => crate::api::data::MsgType::DownloadError,
            _ => unreachable!("Invalid variant for MsgType: {}", inner),
        };
    }
}

impl SseDecode for Option<Sender<ProgressData>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Sender<ProgressData>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::data::bilibili::Owner {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_mid = <i64>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_face = <String>::sse_decode(deserializer);
        return crate::api::data::bilibili::Owner {
            mid: var_mid,
            name: var_name,
            face: var_face,
        };
    }
}

impl SseDecode for crate::api::data::bilibili::Page {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_cid = <i64>::sse_decode(deserializer);
        let mut var_page = <i64>::sse_decode(deserializer);
        let mut var_from = <String>::sse_decode(deserializer);
        let mut var_part_ = <String>::sse_decode(deserializer);
        let mut var_duration = <i64>::sse_decode(deserializer);
        let mut var_vid = <String>::sse_decode(deserializer);
        let mut var_weblink = <String>::sse_decode(deserializer);
        let mut var_dimension = <crate::api::data::bilibili::Dimension>::sse_decode(deserializer);
        let mut var_firstFrame = <String>::sse_decode(deserializer);
        return crate::api::data::bilibili::Page {
            cid: var_cid,
            page: var_page,
            from: var_from,
            part: var_part_,
            duration: var_duration,
            vid: var_vid,
            weblink: var_weblink,
            dimension: var_dimension,
            first_frame: var_firstFrame,
        };
    }
}

impl SseDecode for crate::api::data::ProgressData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_currentSize = <u64>::sse_decode(deserializer);
        let mut var_totalSize = <Option<u64>>::sse_decode(deserializer);
        return crate::api::data::ProgressData {
            current_size: var_currentSize,
            total_size: var_totalSize,
        };
    }
}

impl SseDecode for crate::api::data::bilibili::Rights {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_bp = <i64>::sse_decode(deserializer);
        let mut var_elec = <i64>::sse_decode(deserializer);
        let mut var_download = <i64>::sse_decode(deserializer);
        let mut var_movie = <i64>::sse_decode(deserializer);
        let mut var_pay = <i64>::sse_decode(deserializer);
        let mut var_hd5 = <i64>::sse_decode(deserializer);
        let mut var_noReprint = <i64>::sse_decode(deserializer);
        let mut var_autoplay = <i64>::sse_decode(deserializer);
        let mut var_ugcPay = <i64>::sse_decode(deserializer);
        let mut var_isCooperation = <i64>::sse_decode(deserializer);
        let mut var_ugcPayPreview = <i64>::sse_decode(deserializer);
        let mut var_noBackground = <i64>::sse_decode(deserializer);
        let mut var_cleanMode = <i64>::sse_decode(deserializer);
        let mut var_isSteinGate = <i64>::sse_decode(deserializer);
        let mut var_is360 = <i64>::sse_decode(deserializer);
        let mut var_noShare = <i64>::sse_decode(deserializer);
        return crate::api::data::bilibili::Rights {
            bp: var_bp,
            elec: var_elec,
            download: var_download,
            movie: var_movie,
            pay: var_pay,
            hd5: var_hd5,
            no_reprint: var_noReprint,
            autoplay: var_autoplay,
            ugc_pay: var_ugcPay,
            is_cooperation: var_isCooperation,
            ugc_pay_preview: var_ugcPayPreview,
            no_background: var_noBackground,
            clean_mode: var_cleanMode,
            is_stein_gate: var_isSteinGate,
            is_360: var_is360,
            no_share: var_noShare,
        };
    }
}

impl SseDecode for crate::api::lyric::SearchLyricItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_authors = <String>::sse_decode(deserializer);
        let mut var_token = <String>::sse_decode(deserializer);
        return crate::api::lyric::SearchLyricItem {
            name: var_name,
            authors: var_authors,
            token: var_token,
        };
    }
}

impl SseDecode for crate::api::data::bilibili::SegmentBase {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_initialization = <String>::sse_decode(deserializer);
        let mut var_indexRange = <String>::sse_decode(deserializer);
        return crate::api::data::bilibili::SegmentBase {
            initialization: var_initialization,
            index_range: var_indexRange,
        };
    }
}

impl SseDecode for crate::api::data::bilibili::Stat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_aid = <i64>::sse_decode(deserializer);
        let mut var_view = <i64>::sse_decode(deserializer);
        let mut var_danmaku = <i64>::sse_decode(deserializer);
        let mut var_reply = <i64>::sse_decode(deserializer);
        let mut var_favorite = <i64>::sse_decode(deserializer);
        let mut var_coin = <i64>::sse_decode(deserializer);
        let mut var_share = <i64>::sse_decode(deserializer);
        let mut var_nowRank = <i64>::sse_decode(deserializer);
        let mut var_hisRank = <i64>::sse_decode(deserializer);
        let mut var_like = <i64>::sse_decode(deserializer);
        let mut var_dislike = <i64>::sse_decode(deserializer);
        let mut var_evaluation = <String>::sse_decode(deserializer);
        let mut var_argueMsg = <String>::sse_decode(deserializer);
        return crate::api::data::bilibili::Stat {
            aid: var_aid,
            view: var_view,
            danmaku: var_danmaku,
            reply: var_reply,
            favorite: var_favorite,
            coin: var_coin,
            share: var_share,
            now_rank: var_nowRank,
            his_rank: var_hisRank,
            like: var_like,
            dislike: var_dislike,
            evaluation: var_evaluation,
            argue_msg: var_argueMsg,
        };
    }
}

impl SseDecode for crate::api::data::bilibili::SupportFormat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_quality = <i64>::sse_decode(deserializer);
        let mut var_format = <String>::sse_decode(deserializer);
        let mut var_newDescription = <String>::sse_decode(deserializer);
        let mut var_displayDesc = <String>::sse_decode(deserializer);
        let mut var_superscript = <String>::sse_decode(deserializer);
        return crate::api::data::bilibili::SupportFormat {
            quality: var_quality,
            format: var_format,
            new_description: var_newDescription,
            display_desc: var_displayDesc,
            superscript: var_superscript,
        };
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::api::data::bilibili::Video {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <i64>::sse_decode(deserializer);
        let mut var_baseUrl = <String>::sse_decode(deserializer);
        let mut var_backupUrl = <Vec<String>>::sse_decode(deserializer);
        let mut var_backupUrl2 = <Vec<String>>::sse_decode(deserializer);
        let mut var_bandwidth = <i64>::sse_decode(deserializer);
        let mut var_mimeType = <String>::sse_decode(deserializer);
        let mut var_mimeType2 = <String>::sse_decode(deserializer);
        let mut var_codecs = <String>::sse_decode(deserializer);
        let mut var_width = <i64>::sse_decode(deserializer);
        let mut var_height = <i64>::sse_decode(deserializer);
        let mut var_frameRate = <String>::sse_decode(deserializer);
        let mut var_frameRate2 = <String>::sse_decode(deserializer);
        let mut var_sar = <String>::sse_decode(deserializer);
        let mut var_startWithSap = <i64>::sse_decode(deserializer);
        let mut var_startWithSap2 = <i64>::sse_decode(deserializer);
        let mut var_segmentBase =
            <crate::api::data::bilibili::SegmentBase>::sse_decode(deserializer);
        let mut var_codecid = <i64>::sse_decode(deserializer);
        return crate::api::data::bilibili::Video {
            id: var_id,
            base_url: var_baseUrl,
            backup_url: var_backupUrl,
            backup_url2: var_backupUrl2,
            bandwidth: var_bandwidth,
            mime_type: var_mimeType,
            mime_type2: var_mimeType2,
            codecs: var_codecs,
            width: var_width,
            height: var_height,
            frame_rate: var_frameRate,
            frame_rate2: var_frameRate2,
            sar: var_sar,
            start_with_sap: var_startWithSap,
            start_with_sap2: var_startWithSap2,
            segment_base: var_segmentBase,
            codecid: var_codecid,
        };
    }
}

impl SseDecode for crate::api::data::bilibili::VideoQuality {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_code = <i64>::sse_decode(deserializer);
        return crate::api::data::bilibili::VideoQuality { code: var_code };
    }
}

impl SseDecode for crate::api::data::bilibili::VideoUrl {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_from = <String>::sse_decode(deserializer);
        let mut var_result = <String>::sse_decode(deserializer);
        let mut var_message = <String>::sse_decode(deserializer);
        let mut var_quality = <i64>::sse_decode(deserializer);
        let mut var_format = <String>::sse_decode(deserializer);
        let mut var_timelength = <i64>::sse_decode(deserializer);
        let mut var_acceptFormat = <String>::sse_decode(deserializer);
        let mut var_acceptDescription = <Vec<String>>::sse_decode(deserializer);
        let mut var_acceptQuality = <Vec<i64>>::sse_decode(deserializer);
        let mut var_videoCodecid = <i64>::sse_decode(deserializer);
        let mut var_seekParam = <String>::sse_decode(deserializer);
        let mut var_seekType = <String>::sse_decode(deserializer);
        let mut var_durl = <Vec<crate::api::data::bilibili::Durl>>::sse_decode(deserializer);
        let mut var_supportFormats =
            <Vec<crate::api::data::bilibili::SupportFormat>>::sse_decode(deserializer);
        let mut var_dash = <crate::api::data::bilibili::Dash>::sse_decode(deserializer);
        return crate::api::data::bilibili::VideoUrl {
            from: var_from,
            result: var_result,
            message: var_message,
            quality: var_quality,
            format: var_format,
            timelength: var_timelength,
            accept_format: var_acceptFormat,
            accept_description: var_acceptDescription,
            accept_quality: var_acceptQuality,
            video_codecid: var_videoCodecid,
            seek_param: var_seekParam,
            seek_type: var_seekType,
            durl: var_durl,
            support_formats: var_supportFormats,
            dash: var_dash,
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__init_app_impl(port, ptr, rust_vec_len, data_len),
        2 => wire__crate__api__bilibili__bv_download_audio_by_id_with_callback_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        3 => wire__crate__api__bilibili__bv_download_pic_impl(port, ptr, rust_vec_len, data_len),
        4 => wire__crate__api__bilibili__bv_fetch_ids_impl(port, ptr, rust_vec_len, data_len),
        5 => wire__crate__api__bilibili__bv_video_info_impl(port, ptr, rust_vec_len, data_len),
        7 => wire__crate__api__bilibili__bilibili__Client_audio_urls_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        8 => wire__crate__api__bilibili__bilibili__Client_download_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        9 => wire__crate__api__bilibili__bilibili__Client_fetch_ids_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        10 => wire__crate__api__bilibili__bilibili__Client_info_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        11 => {
            wire__crate__api__bilibili__bilibili__Client_new_impl(port, ptr, rust_vec_len, data_len)
        }
        12 => wire__crate__api__bilibili__bilibili__Client_request_pic_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        13 => wire__crate__api__bilibili__bilibili__Client_video_url_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        14 => wire__crate__api__data__info_data_default_impl(port, ptr, rust_vec_len, data_len),
        15 => wire__crate__api__data__progress_data_default_impl(port, ptr, rust_vec_len, data_len),
        16 => {
            wire__crate__api__data__bilibili__audio_default_impl(port, ptr, rust_vec_len, data_len)
        }
        17 => wire__crate__api__data__bilibili__bv_info_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        18 => {
            wire__crate__api__data__bilibili__dash_default_impl(port, ptr, rust_vec_len, data_len)
        }
        19 => wire__crate__api__data__bilibili__desc_v_2_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        20 => wire__crate__api__data__bilibili__dimension_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        21 => {
            wire__crate__api__data__bilibili__durl_default_impl(port, ptr, rust_vec_len, data_len)
        }
        22 => {
            wire__crate__api__data__bilibili__owner_default_impl(port, ptr, rust_vec_len, data_len)
        }
        23 => {
            wire__crate__api__data__bilibili__page_default_impl(port, ptr, rust_vec_len, data_len)
        }
        24 => {
            wire__crate__api__data__bilibili__rights_default_impl(port, ptr, rust_vec_len, data_len)
        }
        25 => wire__crate__api__data__bilibili__segment_base_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        26 => {
            wire__crate__api__data__bilibili__stat_default_impl(port, ptr, rust_vec_len, data_len)
        }
        27 => wire__crate__api__data__bilibili__support_format_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        28 => {
            wire__crate__api__data__bilibili__video_default_impl(port, ptr, rust_vec_len, data_len)
        }
        29 => wire__crate__api__data__bilibili__video_quality_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        30 => wire__crate__api__data__bilibili__video_url_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        31 => wire__crate__api__log__init_impl(port, ptr, rust_vec_len, data_len),
        32 => wire__crate__api__log__init_logger_impl(port, ptr, rust_vec_len, data_len),
        33 => wire__crate__api__lyric__get_lyric_impl(port, ptr, rust_vec_len, data_len),
        34 => wire__crate__api__lyric__save_lyric_impl(port, ptr, rust_vec_len, data_len),
        35 => wire__crate__api__lyric__search_lyric_impl(port, ptr, rust_vec_len, data_len),
        36 => wire__crate__api__lyric__search_lyric_item_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        37 => wire__crate__api__msg_center__msg_center_init_impl(port, ptr, rust_vec_len, data_len),
        38 => wire__crate__api__msg_center__send_impl(port, ptr, rust_vec_len, data_len),
        39 => wire__crate__api__util__create_dir_all_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        6 => wire__crate__api__bilibili__bv_watch_url_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Client> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Client> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Client>> for Client {
    fn into_into_dart(self) -> FrbWrapper<Client> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Sender<ProgressData>> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<Sender<ProgressData>>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Sender<ProgressData>>> for Sender<ProgressData> {
    fn into_into_dart(self) -> FrbWrapper<Sender<ProgressData>> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::Audio {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.base_url.into_into_dart().into_dart(),
            self.backup_url.into_into_dart().into_dart(),
            self.backup_url2.into_into_dart().into_dart(),
            self.bandwidth.into_into_dart().into_dart(),
            self.mime_type.into_into_dart().into_dart(),
            self.mime_type2.into_into_dart().into_dart(),
            self.codecs.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.frame_rate.into_into_dart().into_dart(),
            self.frame_rate2.into_into_dart().into_dart(),
            self.sar.into_into_dart().into_dart(),
            self.start_with_sap.into_into_dart().into_dart(),
            self.start_with_sap2.into_into_dart().into_dart(),
            self.segment_base.into_into_dart().into_dart(),
            self.codecid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::Audio
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::Audio>
    for crate::api::data::bilibili::Audio
{
    fn into_into_dart(self) -> crate::api::data::bilibili::Audio {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::BvInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.bvid.into_into_dart().into_dart(),
            self.aid.into_into_dart().into_dart(),
            self.videos.into_into_dart().into_dart(),
            self.tid.into_into_dart().into_dart(),
            self.copyright.into_into_dart().into_dart(),
            self.pic.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
            self.ctime.into_into_dart().into_dart(),
            self.desc.into_into_dart().into_dart(),
            self.desc_v2.into_into_dart().into_dart(),
            self.rights.into_into_dart().into_dart(),
            self.owner.into_into_dart().into_dart(),
            self.stat.into_into_dart().into_dart(),
            self.state.into_into_dart().into_dart(),
            self.duration.into_into_dart().into_dart(),
            self.dynamic.into_into_dart().into_dart(),
            self.cid.into_into_dart().into_dart(),
            self.dimension.into_into_dart().into_dart(),
            self.no_cache.into_into_dart().into_dart(),
            self.pages.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::BvInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::BvInfo>
    for crate::api::data::bilibili::BvInfo
{
    fn into_into_dart(self) -> crate::api::data::bilibili::BvInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::Dash {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.duration.into_into_dart().into_dart(),
            self.min_buffer_time.into_into_dart().into_dart(),
            self.min_buffer_time2.into_into_dart().into_dart(),
            self.video.into_into_dart().into_dart(),
            self.audio.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::Dash
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::Dash>
    for crate::api::data::bilibili::Dash
{
    fn into_into_dart(self) -> crate::api::data::bilibili::Dash {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::DescV2 {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.raw_text.into_into_dart().into_dart(),
            self.desc_type.into_into_dart().into_dart(),
            self.biz_id.into_into_dart().into_dart(),
            self.rights.into_into_dart().into_dart(),
            self.owner.into_into_dart().into_dart(),
            self.stat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::DescV2
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::DescV2>
    for crate::api::data::bilibili::DescV2
{
    fn into_into_dart(self) -> crate::api::data::bilibili::DescV2 {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::Dimension {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.rotate.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::Dimension
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::Dimension>
    for crate::api::data::bilibili::Dimension
{
    fn into_into_dart(self) -> crate::api::data::bilibili::Dimension {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::Durl {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.order.into_into_dart().into_dart(),
            self.length.into_into_dart().into_dart(),
            self.size.into_into_dart().into_dart(),
            self.ahead.into_into_dart().into_dart(),
            self.vhead.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
            self.backup_url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::Durl
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::Durl>
    for crate::api::data::bilibili::Durl
{
    fn into_into_dart(self) -> crate::api::data::bilibili::Durl {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::InfoData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.title.into_into_dart().into_dart(),
            self.author.into_into_dart().into_dart(),
            self.video_id.into_into_dart().into_dart(),
            self.short_description.into_into_dart().into_dart(),
            self.view_count.into_into_dart().into_dart(),
            self.length_seconds.into_into_dart().into_dart(),
            self.bv_cid.into_into_dart().into_dart(),
            self.pic_url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::data::InfoData {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::InfoData> for crate::api::data::InfoData {
    fn into_into_dart(self) -> crate::api::data::InfoData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::MsgItem {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.ty.into_into_dart().into_dart(),
            self.data.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::data::MsgItem {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::MsgItem> for crate::api::data::MsgItem {
    fn into_into_dart(self) -> crate::api::data::MsgItem {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::MsgType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::PlainText => 0.into_dart(),
            Self::DownloadError => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::data::MsgType {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::MsgType> for crate::api::data::MsgType {
    fn into_into_dart(self) -> crate::api::data::MsgType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::Owner {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.mid.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.face.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::Owner
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::Owner>
    for crate::api::data::bilibili::Owner
{
    fn into_into_dart(self) -> crate::api::data::bilibili::Owner {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::Page {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.cid.into_into_dart().into_dart(),
            self.page.into_into_dart().into_dart(),
            self.from.into_into_dart().into_dart(),
            self.part.into_into_dart().into_dart(),
            self.duration.into_into_dart().into_dart(),
            self.vid.into_into_dart().into_dart(),
            self.weblink.into_into_dart().into_dart(),
            self.dimension.into_into_dart().into_dart(),
            self.first_frame.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::Page
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::Page>
    for crate::api::data::bilibili::Page
{
    fn into_into_dart(self) -> crate::api::data::bilibili::Page {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::ProgressData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.current_size.into_into_dart().into_dart(),
            self.total_size.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::ProgressData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::ProgressData>
    for crate::api::data::ProgressData
{
    fn into_into_dart(self) -> crate::api::data::ProgressData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::Rights {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.bp.into_into_dart().into_dart(),
            self.elec.into_into_dart().into_dart(),
            self.download.into_into_dart().into_dart(),
            self.movie.into_into_dart().into_dart(),
            self.pay.into_into_dart().into_dart(),
            self.hd5.into_into_dart().into_dart(),
            self.no_reprint.into_into_dart().into_dart(),
            self.autoplay.into_into_dart().into_dart(),
            self.ugc_pay.into_into_dart().into_dart(),
            self.is_cooperation.into_into_dart().into_dart(),
            self.ugc_pay_preview.into_into_dart().into_dart(),
            self.no_background.into_into_dart().into_dart(),
            self.clean_mode.into_into_dart().into_dart(),
            self.is_stein_gate.into_into_dart().into_dart(),
            self.is_360.into_into_dart().into_dart(),
            self.no_share.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::Rights
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::Rights>
    for crate::api::data::bilibili::Rights
{
    fn into_into_dart(self) -> crate::api::data::bilibili::Rights {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::lyric::SearchLyricItem {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.authors.into_into_dart().into_dart(),
            self.token.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::lyric::SearchLyricItem
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::lyric::SearchLyricItem>
    for crate::api::lyric::SearchLyricItem
{
    fn into_into_dart(self) -> crate::api::lyric::SearchLyricItem {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::SegmentBase {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.initialization.into_into_dart().into_dart(),
            self.index_range.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::SegmentBase
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::SegmentBase>
    for crate::api::data::bilibili::SegmentBase
{
    fn into_into_dart(self) -> crate::api::data::bilibili::SegmentBase {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::Stat {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.aid.into_into_dart().into_dart(),
            self.view.into_into_dart().into_dart(),
            self.danmaku.into_into_dart().into_dart(),
            self.reply.into_into_dart().into_dart(),
            self.favorite.into_into_dart().into_dart(),
            self.coin.into_into_dart().into_dart(),
            self.share.into_into_dart().into_dart(),
            self.now_rank.into_into_dart().into_dart(),
            self.his_rank.into_into_dart().into_dart(),
            self.like.into_into_dart().into_dart(),
            self.dislike.into_into_dart().into_dart(),
            self.evaluation.into_into_dart().into_dart(),
            self.argue_msg.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::Stat
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::Stat>
    for crate::api::data::bilibili::Stat
{
    fn into_into_dart(self) -> crate::api::data::bilibili::Stat {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::SupportFormat {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.quality.into_into_dart().into_dart(),
            self.format.into_into_dart().into_dart(),
            self.new_description.into_into_dart().into_dart(),
            self.display_desc.into_into_dart().into_dart(),
            self.superscript.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::SupportFormat
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::SupportFormat>
    for crate::api::data::bilibili::SupportFormat
{
    fn into_into_dart(self) -> crate::api::data::bilibili::SupportFormat {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::Video {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.base_url.into_into_dart().into_dart(),
            self.backup_url.into_into_dart().into_dart(),
            self.backup_url2.into_into_dart().into_dart(),
            self.bandwidth.into_into_dart().into_dart(),
            self.mime_type.into_into_dart().into_dart(),
            self.mime_type2.into_into_dart().into_dart(),
            self.codecs.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.frame_rate.into_into_dart().into_dart(),
            self.frame_rate2.into_into_dart().into_dart(),
            self.sar.into_into_dart().into_dart(),
            self.start_with_sap.into_into_dart().into_dart(),
            self.start_with_sap2.into_into_dart().into_dart(),
            self.segment_base.into_into_dart().into_dart(),
            self.codecid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::Video
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::Video>
    for crate::api::data::bilibili::Video
{
    fn into_into_dart(self) -> crate::api::data::bilibili::Video {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::VideoQuality {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.code.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::VideoQuality
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::VideoQuality>
    for crate::api::data::bilibili::VideoQuality
{
    fn into_into_dart(self) -> crate::api::data::bilibili::VideoQuality {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::data::bilibili::VideoUrl {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.from.into_into_dart().into_dart(),
            self.result.into_into_dart().into_dart(),
            self.message.into_into_dart().into_dart(),
            self.quality.into_into_dart().into_dart(),
            self.format.into_into_dart().into_dart(),
            self.timelength.into_into_dart().into_dart(),
            self.accept_format.into_into_dart().into_dart(),
            self.accept_description.into_into_dart().into_dart(),
            self.accept_quality.into_into_dart().into_dart(),
            self.video_codecid.into_into_dart().into_dart(),
            self.seek_param.into_into_dart().into_dart(),
            self.seek_type.into_into_dart().into_dart(),
            self.durl.into_into_dart().into_dart(),
            self.support_formats.into_into_dart().into_dart(),
            self.dash.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::data::bilibili::VideoUrl
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::data::bilibili::VideoUrl>
    for crate::api::data::bilibili::VideoUrl
{
    fn into_into_dart(self) -> crate::api::data::bilibili::VideoUrl {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for Client {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for Sender<ProgressData> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender<ProgressData>>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender<ProgressData>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for StreamSink<crate::api::data::MsgItem, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<crate::api::data::ProgressData, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::data::bilibili::Audio {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.base_url, serializer);
        <Vec<String>>::sse_encode(self.backup_url, serializer);
        <Vec<String>>::sse_encode(self.backup_url2, serializer);
        <i64>::sse_encode(self.bandwidth, serializer);
        <String>::sse_encode(self.mime_type, serializer);
        <String>::sse_encode(self.mime_type2, serializer);
        <String>::sse_encode(self.codecs, serializer);
        <i64>::sse_encode(self.width, serializer);
        <i64>::sse_encode(self.height, serializer);
        <String>::sse_encode(self.frame_rate, serializer);
        <String>::sse_encode(self.frame_rate2, serializer);
        <String>::sse_encode(self.sar, serializer);
        <i64>::sse_encode(self.start_with_sap, serializer);
        <i64>::sse_encode(self.start_with_sap2, serializer);
        <crate::api::data::bilibili::SegmentBase>::sse_encode(self.segment_base, serializer);
        <i64>::sse_encode(self.codecid, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::data::bilibili::BvInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.bvid, serializer);
        <i64>::sse_encode(self.aid, serializer);
        <i64>::sse_encode(self.videos, serializer);
        <i64>::sse_encode(self.tid, serializer);
        <i64>::sse_encode(self.copyright, serializer);
        <String>::sse_encode(self.pic, serializer);
        <String>::sse_encode(self.title, serializer);
        <i64>::sse_encode(self.ctime, serializer);
        <String>::sse_encode(self.desc, serializer);
        <Vec<crate::api::data::bilibili::DescV2>>::sse_encode(self.desc_v2, serializer);
        <crate::api::data::bilibili::Rights>::sse_encode(self.rights, serializer);
        <crate::api::data::bilibili::Owner>::sse_encode(self.owner, serializer);
        <crate::api::data::bilibili::Stat>::sse_encode(self.stat, serializer);
        <i64>::sse_encode(self.state, serializer);
        <i64>::sse_encode(self.duration, serializer);
        <String>::sse_encode(self.dynamic, serializer);
        <i64>::sse_encode(self.cid, serializer);
        <crate::api::data::bilibili::Dimension>::sse_encode(self.dimension, serializer);
        <bool>::sse_encode(self.no_cache, serializer);
        <Vec<crate::api::data::bilibili::Page>>::sse_encode(self.pages, serializer);
    }
}

impl SseEncode for crate::api::data::bilibili::Dash {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.duration, serializer);
        <f64>::sse_encode(self.min_buffer_time, serializer);
        <f64>::sse_encode(self.min_buffer_time2, serializer);
        <Vec<crate::api::data::bilibili::Video>>::sse_encode(self.video, serializer);
        <Vec<crate::api::data::bilibili::Audio>>::sse_encode(self.audio, serializer);
    }
}

impl SseEncode for crate::api::data::bilibili::DescV2 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.raw_text, serializer);
        <i64>::sse_encode(self.desc_type, serializer);
        <i64>::sse_encode(self.biz_id, serializer);
        <crate::api::data::bilibili::Rights>::sse_encode(self.rights, serializer);
        <crate::api::data::bilibili::Owner>::sse_encode(self.owner, serializer);
        <crate::api::data::bilibili::Stat>::sse_encode(self.stat, serializer);
    }
}

impl SseEncode for crate::api::data::bilibili::Dimension {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.width, serializer);
        <i64>::sse_encode(self.height, serializer);
        <i64>::sse_encode(self.rotate, serializer);
    }
}

impl SseEncode for crate::api::data::bilibili::Durl {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.order, serializer);
        <i64>::sse_encode(self.length, serializer);
        <i64>::sse_encode(self.size, serializer);
        <String>::sse_encode(self.ahead, serializer);
        <String>::sse_encode(self.vhead, serializer);
        <String>::sse_encode(self.url, serializer);
        <Vec<String>>::sse_encode(self.backup_url, serializer);
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::data::InfoData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.title, serializer);
        <String>::sse_encode(self.author, serializer);
        <String>::sse_encode(self.video_id, serializer);
        <String>::sse_encode(self.short_description, serializer);
        <u64>::sse_encode(self.view_count, serializer);
        <u64>::sse_encode(self.length_seconds, serializer);
        <i64>::sse_encode(self.bv_cid, serializer);
        <String>::sse_encode(self.pic_url, serializer);
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::data::bilibili::Audio> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::data::bilibili::Audio>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::data::bilibili::DescV2> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::data::bilibili::DescV2>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::data::bilibili::Durl> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::data::bilibili::Durl>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::data::bilibili::Page> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::data::bilibili::Page>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <i64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::lyric::SearchLyricItem> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::lyric::SearchLyricItem>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::data::bilibili::SupportFormat> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::data::bilibili::SupportFormat>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::data::bilibili::Video> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::data::bilibili::Video>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::data::MsgItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::data::MsgType>::sse_encode(self.ty, serializer);
        <String>::sse_encode(self.data, serializer);
    }
}

impl SseEncode for crate::api::data::MsgType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::data::MsgType::PlainText => 0,
                crate::api::data::MsgType::DownloadError => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Option<Sender<ProgressData>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Sender<ProgressData>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::data::bilibili::Owner {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.mid, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.face, serializer);
    }
}

impl SseEncode for crate::api::data::bilibili::Page {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.cid, serializer);
        <i64>::sse_encode(self.page, serializer);
        <String>::sse_encode(self.from, serializer);
        <String>::sse_encode(self.part, serializer);
        <i64>::sse_encode(self.duration, serializer);
        <String>::sse_encode(self.vid, serializer);
        <String>::sse_encode(self.weblink, serializer);
        <crate::api::data::bilibili::Dimension>::sse_encode(self.dimension, serializer);
        <String>::sse_encode(self.first_frame, serializer);
    }
}

impl SseEncode for crate::api::data::ProgressData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.current_size, serializer);
        <Option<u64>>::sse_encode(self.total_size, serializer);
    }
}

impl SseEncode for crate::api::data::bilibili::Rights {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.bp, serializer);
        <i64>::sse_encode(self.elec, serializer);
        <i64>::sse_encode(self.download, serializer);
        <i64>::sse_encode(self.movie, serializer);
        <i64>::sse_encode(self.pay, serializer);
        <i64>::sse_encode(self.hd5, serializer);
        <i64>::sse_encode(self.no_reprint, serializer);
        <i64>::sse_encode(self.autoplay, serializer);
        <i64>::sse_encode(self.ugc_pay, serializer);
        <i64>::sse_encode(self.is_cooperation, serializer);
        <i64>::sse_encode(self.ugc_pay_preview, serializer);
        <i64>::sse_encode(self.no_background, serializer);
        <i64>::sse_encode(self.clean_mode, serializer);
        <i64>::sse_encode(self.is_stein_gate, serializer);
        <i64>::sse_encode(self.is_360, serializer);
        <i64>::sse_encode(self.no_share, serializer);
    }
}

impl SseEncode for crate::api::lyric::SearchLyricItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.authors, serializer);
        <String>::sse_encode(self.token, serializer);
    }
}

impl SseEncode for crate::api::data::bilibili::SegmentBase {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.initialization, serializer);
        <String>::sse_encode(self.index_range, serializer);
    }
}

impl SseEncode for crate::api::data::bilibili::Stat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.aid, serializer);
        <i64>::sse_encode(self.view, serializer);
        <i64>::sse_encode(self.danmaku, serializer);
        <i64>::sse_encode(self.reply, serializer);
        <i64>::sse_encode(self.favorite, serializer);
        <i64>::sse_encode(self.coin, serializer);
        <i64>::sse_encode(self.share, serializer);
        <i64>::sse_encode(self.now_rank, serializer);
        <i64>::sse_encode(self.his_rank, serializer);
        <i64>::sse_encode(self.like, serializer);
        <i64>::sse_encode(self.dislike, serializer);
        <String>::sse_encode(self.evaluation, serializer);
        <String>::sse_encode(self.argue_msg, serializer);
    }
}

impl SseEncode for crate::api::data::bilibili::SupportFormat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.quality, serializer);
        <String>::sse_encode(self.format, serializer);
        <String>::sse_encode(self.new_description, serializer);
        <String>::sse_encode(self.display_desc, serializer);
        <String>::sse_encode(self.superscript, serializer);
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::api::data::bilibili::Video {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.base_url, serializer);
        <Vec<String>>::sse_encode(self.backup_url, serializer);
        <Vec<String>>::sse_encode(self.backup_url2, serializer);
        <i64>::sse_encode(self.bandwidth, serializer);
        <String>::sse_encode(self.mime_type, serializer);
        <String>::sse_encode(self.mime_type2, serializer);
        <String>::sse_encode(self.codecs, serializer);
        <i64>::sse_encode(self.width, serializer);
        <i64>::sse_encode(self.height, serializer);
        <String>::sse_encode(self.frame_rate, serializer);
        <String>::sse_encode(self.frame_rate2, serializer);
        <String>::sse_encode(self.sar, serializer);
        <i64>::sse_encode(self.start_with_sap, serializer);
        <i64>::sse_encode(self.start_with_sap2, serializer);
        <crate::api::data::bilibili::SegmentBase>::sse_encode(self.segment_base, serializer);
        <i64>::sse_encode(self.codecid, serializer);
    }
}

impl SseEncode for crate::api::data::bilibili::VideoQuality {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.code, serializer);
    }
}

impl SseEncode for crate::api::data::bilibili::VideoUrl {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.from, serializer);
        <String>::sse_encode(self.result, serializer);
        <String>::sse_encode(self.message, serializer);
        <i64>::sse_encode(self.quality, serializer);
        <String>::sse_encode(self.format, serializer);
        <i64>::sse_encode(self.timelength, serializer);
        <String>::sse_encode(self.accept_format, serializer);
        <Vec<String>>::sse_encode(self.accept_description, serializer);
        <Vec<i64>>::sse_encode(self.accept_quality, serializer);
        <i64>::sse_encode(self.video_codecid, serializer);
        <String>::sse_encode(self.seek_param, serializer);
        <String>::sse_encode(self.seek_type, serializer);
        <Vec<crate::api::data::bilibili::Durl>>::sse_encode(self.durl, serializer);
        <Vec<crate::api::data::bilibili::SupportFormat>>::sse_encode(
            self.support_formats,
            serializer,
        );
        <crate::api::data::bilibili::Dash>::sse_encode(self.dash, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.1.0.

    // Section: imports

    use super::*;
    use crate::api::bilibili::bilibili::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[no_mangle]
    pub extern "C" fn frbgen_musicbox_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_musicbox_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_musicbox_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderProgressData(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< Sender < ProgressData >>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_musicbox_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderProgressData(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< Sender < ProgressData >>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.1.0.

    // Section: imports

    use super::*;
    use crate::api::bilibili::bilibili::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderProgressData(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< Sender < ProgressData >>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderProgressData(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< Sender < ProgressData >>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;
