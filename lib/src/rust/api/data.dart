// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are not used by any `pub` functions: `DownloadError`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`

class InfoData {
  final String title;
  final String author;
  final String videoId;
  final String shortDescription;
  final BigInt viewCount;
  final BigInt lengthSeconds;
  final PlatformInt64 bvCid;

  const InfoData({
    required this.title,
    required this.author,
    required this.videoId,
    required this.shortDescription,
    required this.viewCount,
    required this.lengthSeconds,
    required this.bvCid,
  });

  static Future<InfoData> default_() =>
      RustLib.instance.api.crateApiDataInfoDataDefault();

  @override
  int get hashCode =>
      title.hashCode ^
      author.hashCode ^
      videoId.hashCode ^
      shortDescription.hashCode ^
      viewCount.hashCode ^
      lengthSeconds.hashCode ^
      bvCid.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is InfoData &&
          runtimeType == other.runtimeType &&
          title == other.title &&
          author == other.author &&
          videoId == other.videoId &&
          shortDescription == other.shortDescription &&
          viewCount == other.viewCount &&
          lengthSeconds == other.lengthSeconds &&
          bvCid == other.bvCid;
}

class MsgItem {
  final MsgType ty;
  final String data;

  const MsgItem({
    required this.ty,
    required this.data,
  });

  @override
  int get hashCode => ty.hashCode ^ data.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MsgItem &&
          runtimeType == other.runtimeType &&
          ty == other.ty &&
          data == other.data;
}

enum MsgType {
  plainText,
  youtubeDownloadError,
  ;
}

class ProgressData {
  final BigInt currentSize;
  final BigInt? totalSize;

  const ProgressData({
    required this.currentSize,
    this.totalSize,
  });

  static Future<ProgressData> default_() =>
      RustLib.instance.api.crateApiDataProgressDataDefault();

  @override
  int get hashCode => currentSize.hashCode ^ totalSize.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ProgressData &&
          runtimeType == other.runtimeType &&
          currentSize == other.currentSize &&
          totalSize == other.totalSize;
}
